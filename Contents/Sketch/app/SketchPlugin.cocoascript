/**
 * SketchPlugin Class
 *
 * Manages CocoaScript code for our plugin.
 *
 * @constructor
 */
function SketchPlugin() {
    // The Sketch context
    this.context = {};
}

/**
 * Init
 *
 * Sets the current app & plugin context, then renders the plugin.
 *
 * @param {object} sketchContext An object provided by Sketch with information on the currently running app and plugin.
 * @returns {SketchPlugin}
 */
SketchPlugin.prototype.init = function(context) {
    this.context = context;

    // Generate symbol data for the webview
    this.createSymbolsJavaScriptFile();

    // Create a window
    this.createWindow();

    // Create a WebView
    this.createWebView();

    // Blastoff! Run the plugin.
    [NSApp run];

    return this;
};

/**
 * Create Window
 *
 * Creates an [NSWindow] object to hold a WebView in.
 */
SketchPlugin.prototype.createWindow = function() {
    this.window = [[[NSWindow alloc]
        initWithContentRect:NSMakeRect(0, 0, 800, 800)
        styleMask:NSTitledWindowMask | NSClosableWindowMask
        backing:NSBackingStoreBuffered
        defer:false
    ] autorelease];

    this.window.center();
    this.window.makeKeyAndOrderFront_(this.window);

    return this;
};

/**
 * Create WebView
 *
 * Creates a [WebView] object and loads it with content.
 */
SketchPlugin.prototype.createWebView = function() {
    // create frame for loading content in
    var webviewFrame = NSMakeRect(0, 0, 800, 800);

    // Request index.html
    var webviewFolder   = this.context.scriptPath.stringByDeletingLastPathComponent() + '/app/webview/';
    var webviewHtmlFile = webviewFolder + 'index.html';
    var requestUrl      = [NSURL fileURLWithPath:webviewHtmlFile];
    var urlRequest      = [NSMutableURLRequest requestWithURL:requestUrl];

    // Create the WebView, frame, and set content
    this.webView = WebView.new();
    this.webView.initWithFrame(webviewFrame);
    this.webView.mainFrame().loadRequest(urlRequest);
    this.window.contentView().addSubview(this.webView);

    // Assign a redirect delegate to the WebView
    this.createWebViewRedirectDelegate();

    return this;
};

/**
 * Get All Document Symbols
 *
 * Gets every symbol in the document (in all pages, artboards, etc)
 *
 * @returns {Array} An array of MSSymbolMaster objects.
 */
SketchPlugin.prototype.getAllDocumentSymbols = function() {
    var pages = this.context.document.pages();
    var symbols = [];

    // Loop through all pages
    for (var i = 0; i < pages.count(); i++) {
        var page = pages.objectAtIndex(i);

        // Loop through all artboard layers
        for (var k = 0; k < page.layers().count(); k++) {
            var layer = page.layers().objectAtIndex(k);

            if ('MSSymbolMaster' == layer.class()) {
                symbols.push(layer);
            }
        }
    }

    return symbols;
};

/**
 * Create Symbols JavaScript File
 *
 * Creates a JavaScript file representing all document master symbols.
 * This data is consumed by the WebView for rendering symbol information.
 *
 * Generated file path:
 * Contents/Sketch/app/webview/symbolData.js
 *
 * @returns {SketchPlugin}
 * @method
 */
SketchPlugin.prototype.createSymbolsJavaScriptFile = function() {
    /**
     * Build the content for the JavaScript file
     */
    var webviewSymbols = [];
    this.documentSymbols = this.getAllDocumentSymbols();

    // Push all document symbols to an array of symbol objects
    for (var i = 0; i < this.documentSymbols.length; i++) {
        var symbol = this.documentSymbols[i];

        webviewSymbols.push({
            name: '' + symbol.name(),
            symbolId: '' + symbol.symbolID(),
            symbolIndex: i
        });
    }

    /**
     * Create The JavaScript File, then fill it with symbol data
     */
    var jsContent = 'var symbolData = ' + JSON.stringify(webviewSymbols) + ';';
    var jsContentNSSString = [NSString stringWithFormat:"%@", jsContent];
    var jsContentFilePath  = this.context.scriptPath.stringByDeletingLastPathComponent() + '/app/webview/symbolData.js';

    [jsContentNSSString writeToFile:jsContentFilePath atomically:true encoding:NSUTF8StringEncoding error:nil];

    return this;
};

/**
 * Create Webview Redirect Delegate
 *
 * Creates a Cocoa delegate class, then registers a callback for the redirection event.
 */
SketchPlugin.prototype.createWebViewRedirectDelegate = function() {
    /**
     * Create a Delegate class and register it
     */
    var className = 'MochaJSDelegate_DynamicClass_SymbolUI_WebviewRedirectDelegate' + NSUUID.UUID().UUIDString();
    var delegateClassDesc = MOClassDescription.allocateDescriptionForClassWithName_superclass_(
        className,
        NSObject
    );
    delegateClassDesc.registerClass();

    /**
     * Register the “event” to respond to and specify the callback function
     */
    var redirectEventSelector = NSSelectorFromString(
        'webView:willPerformClientRedirectToURL:delay:fireDate:forFrame:'
    );
    delegateClassDesc.addInstanceMethodWithSelector_function_(
        // The “event” - the WebView is about to redirect soon
        NSSelectorFromString('webView:willPerformClientRedirectToURL:delay:fireDate:forFrame:'),
        // The “listener” - a callback function to fire
        function(sender, URL) {
            // Ensure its the URL we want to respond to.
            // You can also fire different methods based on the URL if you have multiple events.
            if ('http://10.7.50.13/exegesis/svg_parser/parse_svg/static/sketches/' != URL) {
                return;
            }
            // A special method to export symbols - we haven’t created it yet
            this.exportAllSymbolsToImages();
        }.bind(this)
    );

    // Associate the new delegate to the WebView we already created
    this.webView.setFrameLoadDelegate_(
        NSClassFromString(className).new()
    );

    return this;
};

SketchPlugin.prototype.exportAllSymbolsToImages = function() {
    /**
     * Loop through symbols; export each one as a PNG
     */
    for (var i = 0; i < this.documentSymbols.length; i++) {
        var symbol = this.documentSymbols[i];

        // Specify the path and filename to create
        var filePath = this.context.scriptPath.stringByDeletingLastPathComponent() + '/export/' + symbol.symbolID() + '.png';

        // Create preview PNG
        var slice = [[MSExportRequest exportRequestsFromExportableLayer:symbol] firstObject];

        [slice setShouldTrim:1];
        [slice setScale:1];
        [(this.context.document) saveArtboardOrSlice:slice toFile:filePath];
    }

    var urlString = "http://10.7.50.13/exegesis/svg_parser/parse_svg/static/sketches/";
    var request = NSMutableURLRequest.alloc().init().autorelease();
    request.setURL(NSURL.URLWithString(urlString));
    request.setHTTPMethod("POST");

    var boundary = NSString.stringWithString("0xLhTaLbOkNdArZ");
    var contentType = NSString.stringWithFormat("multipart/form-data; boundary=%", boundary);
    request.addValue_forHTTPHeaderField(contentType, "Content-Type");

    //Reading the file
    var filePath = NSBundle.mainBundle().resourcePath().stringByAppendingPathComponent("test.zip");
    var myData = NSData.dataWithContentsOfFile(filePath);

    var body = NSMutableData.data();

    body.appendData(NSString.stringWithFormat("\r\n--%@\r\n", boundary).dataUsingEncoding(NSUTF8StringEncoding));
    body.appendData(NSString.stringWithFormat("Content-Disposition: form-data; name=\"userfile\"; filename=\"test.zip\"\r\n").dataUsingEncoding(NSUTF8StringEncoding));
    body.appendData(NSString.stringWithString("Content-Type: application/octet-stream\r\n\r\n").dataUsingEncoding(NSUTF8StringEncoding));
    body.appendData(myData);
    body.appendData(NSString.stringWithFormat("\r\n--%@--\r\n", boundary).dataUsingEncoding(NSUTF8StringEncoding));

    request.setHTTPBody(body);

    var returnError = null;
    var returnResponse = null;

    [NSURLConnection.sendSynchronousRequest_returningResponse_error(request, returnResponse, returnError)];
    this.context.document.displayMessage('All symbols exported!');
};