/**
 * SketchPlugin Class
 *
 * Manages CocoaScript code for our plugin.
 *
 * @constructor
 */
function SketchPlugin() {
    // The Sketch context
    this.context = {};
}

/**
 * Init
 *
 * Sets the current app & plugin context, then renders the plugin.
 *
 * @param {object} sketchContext An object provided by Sketch with information on the currently running app and plugin.
 * @returns {SketchPlugin}
 */
SketchPlugin.prototype.init = function(context) {
    this.context = context;

    // Create a window
    this.createWindow();

    // Create a WebView
    this.createWebView();

    // Blastoff! Run the plugin.
    [NSApp run];

    return this;
};

/**
 * Create Window
 *
 * Creates an [NSWindow] object to hold a WebView in.
 */
SketchPlugin.prototype.createWindow = function() {
    this.window = [[[NSWindow alloc]
        initWithContentRect:NSMakeRect(0, 0, 800, 800)
        styleMask:NSTitledWindowMask | NSClosableWindowMask
        backing:NSBackingStoreBuffered
        defer:false
    ] autorelease];

    this.window.center();
    this.window.makeKeyAndOrderFront_(this.window);

    return this;
};

/**
 * Create WebView
 *
 * Creates a [WebView] object and loads it with content.
 */
SketchPlugin.prototype.createWebView = function() {
    // create frame for loading content in
    var webviewFrame = NSMakeRect(0, 0, 800, 800);

    // Request index.html
    var webviewFolder   = this.context.scriptPath.stringByDeletingLastPathComponent() + '/app/webview/';
    var webviewHtmlFile = webviewFolder + 'index.html';
    var requestUrl      = [NSURL fileURLWithPath:webviewHtmlFile];
    var urlRequest      = [NSMutableURLRequest requestWithURL:requestUrl];

    // Create the WebView, frame, and set content
    this.webView = WebView.new();
    this.webView.initWithFrame(webviewFrame);
    this.webView.mainFrame().loadRequest(urlRequest);
    this.window.contentView().addSubview(this.webView);

    return this;
};